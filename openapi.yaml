openapi: 3.1.0

info:
  title: packchat Internal API
  description: API to service packchat apps
  version: 1.0.0
  contact:
    name: packchat
    url: https://www.packchat.com/
    email: hello@packchat.com

tags:
  - name: authentication
    description: Authentication
  - name: channels
    description: Channels
  - name: live-activities
    description: Live Activities
  - name: media
    description: Media
  - name: moments
    description: Moments
  - name: packs
    description: Pack
  - name: user
    description: User
  - name: notifications
    description: Notifications
  - name: misc
    description: Misc

servers:
  - url: https://api-staging.packchat.com/api
    description: Staging server
  - url: https://api.packchat.com/api
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:

    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
        onboarded_at:
          type: string
          format: date-time
        phone:
          type: string
        phone_country:
          type: string
          minLength: 2
          maxLength: 2
        pin:
          type: string

    Device:
      type: object
      required:
        - device_id
        - phone_country
        - phone
      properties:
        device_id:
          type: string
        phone_country:
          type: string
          minLength: 2
          maxLength: 2
        phone:
          type: string

    DeviceResponse:
      type: object
      description: Response from the device registration/upsert endpoint
      required:
        - device_uuid
        - user_uuid
        - on_waitlist
      properties:
        id:
          type: string
          format: uuid
          description: Internal UUID for the registered device
        device_id:
          type: string
          format: uuid
          description: Registered devices given id from device
        user_id:
          type: string
          format: uuid
          description: Internal UUID for the associated user
        on_waitlist:
          type: boolean
          description: Indicates if the user is currently on the waitlist

    AuthRequest:
      type: object
      required:
        - device_uuid
        - phone_uuid
        - otp
      properties:
        device_uuid:
          type: string
          format: uuid
          description: Internal UUID for device
        phone_uuid:
          type: string
          format: uuid
          description: Internal UUID for user
        otp:
          type: string
          minLength: 6
          maxLength: 6
          description: 6 digit one time password code, expires after 5 minutes

    AuthResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: JWT Bearer token for authentication

    Channel:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [pack, group]
        image_url:
          type: string
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Moment:
      type: object
      required:
        - type
        - timestamp
        - local_id
      properties:
        uuid:
          type: string
          format: uuid
        type:
          type: string
          enum: [image, video]
        timestamp:
          type: string
          format: date-time
        caption:
          type: string
        local_id:
          type: string
        status:
          type: string
          enum: [pending, uploading, active, failed]
        media_url:
          type: string
        secondary_media_url:
          type: string
        user:
          $ref: '#/components/schemas/User'

    MomentReaction:
      type: object
      required:
        - emoji
      properties:
        emoji:
          type: string
        user:
          $ref: '#/components/schemas/User'

    MomentReply:
      type: object
      required:
        - message_id
        - body
        - channel_id
      properties:
        message_id:
          type: string
          format: uuid
        body:
          type: string
        channel_id:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'

    MomentState:
      type: object
      properties:
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/MomentReaction'
        replies:
          type: array
          items:
            $ref: '#/components/schemas/MomentReply'
        viewed:
          type: boolean
        viewed_at:
          type: string
          format: date-time

    NotificationRequest:
      type: object
      properties:
        title:
          type: string
        subtitle:
          type: string
        body:
          type: string
        sound:
          type: string
        expires_at:
          type: integer
        category:
          type: string
        metadata:
          type: object
        apple_live_content:
          type: object
        apple_live_stage:
          type: string
        badge:
          type: integer
        type:
          type: string
          enum: [alert]

    DeviceToken:
      type: object
      required:
        - token
        - device_type
      properties:
        token:
          type: string
          format: uuid
        device_type:
          type: string
          enum: [apple]
        live:
          type: boolean

    PackRequest:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          format: uuid

    PackRequestByPin:
      type: object
      required:
        - pin
      properties:
        pin:
          type: string

    Contact:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        display_name:
          type: string
        avatar_url:
          type: string
        in_pack:
          type: boolean
        blocked:
          type: boolean

    Invite:
      type: object
      required:
        - phone
        - phone_country
        - first_name
        - last_name
      properties:
        phone:
          type: string
        phone_country:
          type: string
          minLength: 2
          maxLength: 2
        first_name:
          type: string
        last_name:
          type: string
        avatar:
          type: string
          format: binary
        status:
          type: string
          enum: [not_sent, pending, lapsed, cancelled, active]

    AddressBookSync:
      type: object
      required:
        - additions
        - subtractions
      properties:
        additions:
          type: array
          items:
            type: string
        subtractions:
          type: array
          items:
            type: string

    LiveActivity:
      type: object
      required:
        - primary_image
        - recipient_ids
        - comment
        - title
        - primary_source
      properties:
        primary_image:
          type: string
          format: binary
        recipient_ids:
          type: array
          items:
            type: string
            format: uuid
        comment:
          type: string
        title:
          type: string
        primary_source:
          type: string
        secondary_image:
          type: string
          format: binary
        secondary_source:
          type: string

    ReportReason:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string

    WaitlistEmail:
      type: object
      required:
        - user_id
        - email
      properties:
        user_id:
          type: string
          format: uuid
        email:
          type: string
          format: email

    WaitlistAccessCode:
      type: object
      required:
        - user_id
        - access_code
      properties:
        user_id:
          type: string
          format: uuid
        access_code:
          type: string
    MomentChunkUpload:
      type: object
      description: Schema for uploading image chunks to a moment
      required:
        - chunk
        - chunks
        - file
      properties:
        chunk:
          type: integer
          description: Current chunk number being uploaded
          minimum: 1
        chunks:
          type: integer
          description: Total number of chunks for the complete image
          minimum: 1
        file:
          type: string
          format: binary
          description: The image chunk data being uploaded

    ChannelUpdate:
      type: object
      description: Schema for updating a channel's properties
      properties:
        name:
          type: string
          description: New name for the channel
          minLength: 1
        image:
          type: string
          format: binary
          description: New image for the channel
        _method:
          type: string
          enum: [PATCH]
          description: Laravel methodology for form-data patch requests
          default: PATCH

    ChannelCreate:
      type: object
      description: Schema for creating a new channel
      required:
        - type
        - members
      properties:
        type:
          type: string
          enum: [pack, group]
          description: Type of channel to create
        members:
          type: array
          description: Array of user IDs to add to the channel
          minItems: 1
          items:
            type: string
            format: uuid
        name:
          type: string
          description: Name of the channel (required for group type)
          minLength: 1
        image:
          type: string
          format: binary
          description: Channel image (optional)

paths:
  /devices:
    post:
      tags:
        - authentication
      operationId: upsertDevice
      summary: Upsert device
      description: |
        This endpoint will create or get a device and either create a new user if one doesn't exist with the exact credentials given OR pass back the existing user ID in the response.
        - If a user exists but not with the device ID given, a new device is created and associated to the existing user
        - If a device exists but not with the phone number given, a new user is created and associated to the existing device
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device upserted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResponse'

  /authenticate:
    post:
      tags:
        - authentication
      operationId: authenticateUser
      summary: Authenticate user
      description: Use the OTP, Device ID and User ID from the Upsert Device endpoint to authenticate the user and retrieve the bearer token needed to make subsequent API calls. The OTP expires after 5 minutes.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /logout:
    post:
      tags:
        - authentication
      operationId: logoutUser
      summary: Logout user
      description: Use this endpoint to unauthenticate a user's session. This will blacklist any previous token used.
      responses:
        '200':
          description: Successfully logged out

  /channels:
    get:
      tags:
        - channels
      operationId: getChannels
      summary: Get all channels
      description: Gets all chat channels the user is associated with. This holds intermediary information about the channel and the GetStream Channel ID.
      parameters:
        - name: filter[name]
          in: query
          schema:
            type: string
        - name: filter[owner_id]
          in: query
          schema:
            type: string
        - name: filter[group]
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'

    post:
      tags:
        - channels
      operationId: createChannel
      summary: Create channel
      description: Creates a channel within PackChat and GetStream. The users in the members array must exist in both PackChat and GetStream.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChannelCreate'
      responses:
        '201':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

  /channels/{uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - channels
      operationId: getChannel
      summary: Get channel
      description: Get a channel's data
      responses:
        '200':
          description: Channel details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

    post:
      tags:
        - channels
      operationId: updateChannel
      summary: Update channel
      description: Update a channel's name and image. Only for Groups.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChannelUpdate'
      responses:
        '200':
          description: Channel updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
    delete:
      tags:
        - channels
      operationId: deleteChannel
      summary: Delete channel
      description: Deletes a channel by ID. Also removes the associated GetStream Channel.
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Channel deleted successfully

  /channels/{uuid}/members:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - channels
      operationId: addChannelMember
      summary: Add channel member
      description: Add a member to a group channel. The member must exist in both PackChat and GetStream.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - members
              properties:
                members:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Member added successfully

  /channels/{uuid}/members/{member-uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: member-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    delete:
      tags:
        - channels
      operationId: removeChannelMember
      summary: Remove channel member
      description: Remove a member from the group chat
      responses:
        '204':
          description: Member removed successfully

  /channels/{uuid}/moderators:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - channels
      operationId: addChannelModerator
      summary: Add channel moderator
      description: Add a moderator to a group channel only. This user will have elevated privileges within the group chat.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - moderators
              properties:
                moderators:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Moderator added successfully

  /channels/{uuid}/moderators/{member-uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: member-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    delete:
      tags:
        - channels
      operationId: removeChannelModerator
      summary: Remove channel moderator
      description: Remove a member as a moderator from a group chat
      responses:
        '204':
          description: Moderator removed successfully

  /app/live-activity:
    post:
      tags:
        - live-activities
      operationId: sendLiveActivity
      summary: Send live activity
      description: Send a live activity notification to specified recipients
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LiveActivity'
      responses:
        '200':
          description: Live activity sent successfully

  /app/live-activity/{id}/opened:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    put:
      tags:
        - live-activities
      operationId: markLiveActivityOpened
      summary: Mark live activity as opened
      description: Update the status of a live activity to indicate it has been opened
      responses:
        '200':
          description: Live activity marked as opened

  /app/live-activity-moment:
    post:
      tags:
        - live-activities
      operationId: sendLiveActivityMoment
      summary: Send live activity moment
      description: Send a live activity moment notification with support for both primary and secondary images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LiveActivity'
      responses:
        '200':
          description: Live activity moment sent successfully

  /media/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - media
      operationId: getMediaItem
      summary: Get media item
      description: This request is only to be used when necessary for when a normal signed URL directly from the backend isn't viable. The only current example of this is when a user signs up and we create their GetStream profile, we upload an image for them.
      responses:
        '200':
          description: Media item details

  /moments:
    get:
      tags:
        - moments
      operationId: getMoments
      summary: Get moments
      description: List moments with multiple filters to drill down to moments that need to be displayed.
      parameters:
        - name: filter[time_taken_between]
          in: query
          schema:
            type: string
        - name: filter[user_id]
          in: query
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
        - name: filter[created_between]
          in: query
          schema:
            type: string
        - name: filter[excludes]
          in: query
          schema:
            type: string
        - name: filter[seen]
          in: query
          schema:
            type: boolean
        - name: filter[type]
          in: query
          schema:
            type: string
        - name: filter[timestamp]
          in: query
          schema:
            type: string
        - name: filter[local_id]
          in: query
          schema:
            type: string
        - name: filter[notified]
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of moments

  /moments/{uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - moments
      operationId: getMoment
      summary: Get moment
      description: Get a moment based on UUID returned from Get Moments Endpoint
      responses:
        '200':
          description: Moment details

    put:
      tags:
        - moments
      operationId: updateMoment
      summary: Update moment
      description: Update a moment's status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, uploading, active, failed]
      responses:
        '200':
          description: Moment updated successfully

    delete:
      tags:
        - moments
      operationId: deleteMoment
      summary: Delete moment
      description: Delete a specific moment
      responses:
        '204':
          description: Moment deleted successfully

  /moments/calendar:
    get:
      tags:
        - moments
      operationId: getMomentCalendar
      summary: Get moment calendar
      description: Returns an alternative moments listing based on the first moment of a day. Gives the first moment of a day for all dates defined by filters.
      parameters:
        - name: filter[time_taken_between]
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
        - name: filter[user_id]
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Calendar moments list

  /users/me/moments/state:
    get:
      tags:
        - moments
      operationId: getUserMomentsState
      summary: Get user moments current state
      description: Returns the current state for the authenticated user on their moments usage from the last three weeks.
      responses:
        '200':
          description: User moments state

  /users/me/moments/{moment-uuid}/chunk:
    parameters:
      - name: moment-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - moments
      operationId: uploadMomentChunk
      summary: Upload moment image chunk
      description: Upload image chunks to a specific moment. Run the Create Image Moment endpoint first to obtain a fresh moment model and uuid.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MomentChunkUpload'
      responses:
        '200':
          description: Chunk uploaded successfully

  /moments/viewed:
    post:
      tags:
        - moments
      operationId: markMomentsViewed
      summary: Mark moments as viewed
      description: Marks multiple moments as viewed by the authenticated user. Can accept single moment ID's or be used for bulk views/skips. The intention of this API is to send and forget.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - moments
              properties:
                moments:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Moments marked as viewed

  /moments/{moment-uuid}/reaction:
    parameters:
      - name: moment-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - moments
      operationId: addMomentReaction
      summary: Add reaction to moment
      description: Adds an emoji reaction to the moment. Use standard unicode string emojis. This returns a user specific state for that given moment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MomentReaction'
      responses:
        '200':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MomentState'

  /moments/{moment-uuid}/reply:
    parameters:
      - name: moment-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - moments
      operationId: addMomentReply
      summary: Add reply to moment
      description: Stores a users reply message id and snippet on the moment. This returns a user specific state for that given moment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MomentReply'
      responses:
        '200':
          description: Reply added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MomentState'

  /moments/{moment-uuid}/state:
    parameters:
      - name: moment-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - moments
      operationId: getMomentState
      summary: Get moment state
      description: Gets a moment's interactive state. Gives a list of records of specific user interactions with the moment e.g. reactions & replies.
      responses:
        '200':
          description: Moment state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MomentState'

  /moments/catchup/{user-uuid}:
    parameters:
      - name: user-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - moments
      operationId: markUserMomentsCaughtUp
      summary: Mark user moments as caught up
      description: Set the authenticated user as having seen the given user uuid's moments
      responses:
        '200':
          description: Moments marked as caught up

  /moments/catchup:
    get:
      tags:
        - moments
      operationId: getMomentsToCatchUp
      summary: Get moments to catch up on
      description: Get a list of moments that the authenticated user hasn't seen and needs to catch up on.
      responses:
        '200':
          description: List of moments to catch up on

  /moments/recent:
    get:
      tags:
        - moments
      operationId: getRecentMoments
      summary: Get recent moments
      description: Get a list of recent moments that the authenticated user hasn't seen and needs to catch up on.
      responses:
        '200':
          description: List of recent moments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Moment'

  /moments/{moment-uuid}/report:
    parameters:
      - name: moment-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - moments
      operationId: reportMoment
      summary: Report moment
      description: Report a moment using the reason ID obtained from the report reasons endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: integer
      responses:
        '200':
          description: Moment reported successfully

  /pack/request:
    post:
      tags:
        - packs
      operationId: createPackRequest
      summary: Create pack request
      description: Send a pack request to another user either by user ID or pin code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PackRequest'
                - $ref: '#/components/schemas/PackRequestByPin'
      responses:
        '201':
          description: Pack request created successfully

  /pack/request/{id}/accept:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    put:
      tags:
        - packs
      operationId: acceptPackRequest
      summary: Accept pack request
      description: Accept a pending pack request by its ID.
      responses:
        '200':
          description: Pack request accepted

  /pack/request/{id}/decline:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    delete:
      tags:
        - packs
      operationId: declinePackRequest
      summary: Decline pack request
      description: Decline a pending pack request by its ID.
      responses:
        '204':
          description: Pack request declined

  /pack:
    get:
      tags:
        - packs
      operationId: getPack
      summary: Get pack
      description: Get a list of users where the currently authenticated user is a part of their pack.
      responses:
        '200':
          description: Pack details

  /pack-members:
    get:
      tags:
        - packs
      operationId: getPackMembers
      summary: Get pack members
      description: Get a list of members in your pack.
      responses:
        '200':
          description: List of pack members

    post:
      tags:
        - packs
      operationId: createPackMember
      summary: Create pack member
      description: Add a PackChat user to your pack.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - members
              properties:
                members:
                  type: array
                  items:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Pack member added successfully

  /pack-members/{user-uuid}:
    parameters:
      - name: user-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    delete:
      tags:
        - packs
      operationId: removePackMember
      summary: Remove pack member
      description: Remove a user from your pack.
      responses:
        '204':
          description: Member removed successfully

  /users/me:
    get:
      tags:
        - user
      operationId: getAuthenticatedUser
      summary: Get authenticated user
      description: Get the currently authenticated user's profile information.
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/me/name:
    patch:
      tags:
        - user
      operationId: updateUserName
      summary: Update user name
      description: Update the currently authenticated user's first and last name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
      responses:
        '200':
          description: Name updated successfully

  /users/me/display-name:
    patch:
      tags:
        - user
      operationId: updateUserDisplayName
      summary: Update user display name
      description: Update the currently authenticated user's display name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - display_name
              properties:
                display_name:
                  type: string
      responses:
        '200':
          description: Display name updated successfully

  /users/me/avatar:
    post:
      tags:
        - user
      operationId: updateUserAvatar
      summary: Update user avatar
      description: Update the currently authenticated user's avatar image.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
                - _method
              properties:
                avatar:
                  type: string
                  format: binary
                _method:
                  type: string
                  enum: [PATCH]
      responses:
        '200':
          description: Avatar updated successfully

  /users/me/onboarded:
    put:
      tags:
        - user
      operationId: markUserOnboarded
      summary: Mark user as onboarded
      description: This request updates the user's onboarded timestamp which allows the user to exit the onboarding flow and continue to the app. This request will also associate the user's ID with a phone hash in the address table if it exists and automatically accept any pending invites.
      responses:
        '200':
          description: User marked as onboarded

    delete:
      tags:
        - user
      operationId: removeUserOnboarded
      summary: Remove onboarded status
      description: This request will remove the onboarded flag from the user and force them back into onboarding flow.
      responses:
        '204':
          description: Onboarded status removed

  /users/me/contacts:
    get:
      tags:
        - user
      operationId: getUserContacts
      summary: Get user contacts
      description: Retrieves all contacts the user is associated with in a friendship. Includes both in pack and not in pack users and can be filtered by pack status.
      parameters:
        - name: filter[in_pack]
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'

  /users/me/address-book:
    get:
      tags:
        - user
      operationId: getAddressBook
      summary: Get address book
      description: Retrieves a user's phone address book. This gets uploaded and synced each time the user is authenticated in the app.
      responses:
        '200':
          description: User's address book

  /users/me/address-book/delta:
    put:
      tags:
        - user
      operationId: syncAddressBook
      summary: Sync address book
      description: Sync the device's address book to PackChat using hashed versions of phone numbers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBookSync'
      responses:
        '200':
          description: Address book synced successfully

  /users/me/contacts/block/{uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - user
      operationId: blockContact
      summary: Block contact
      description: Block a contact by their UUID to prevent interactions.
      responses:
        '200':
          description: Contact blocked successfully

  /users/me/contacts/unblock/{uuid}:
    parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags:
        - user
      operationId: unblockContact
      summary: Unblock contact
      description: Unblock a previously blocked contact by their UUID.
      responses:
        '200':
          description: Contact unblocked successfully

  /users/me/contacts/invite:
    post:
      tags:
        - user
      operationId: createInvite
      summary: Create invite
      description: Create an invite for a non PackChat user. The invite has an initial status of 'not_sent' until the interfacing application updates the status.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invite'
      responses:
        '201':
          description: Invite created successfully

  /notification/device/send:
    post:
      tags:
        - notifications
      operationId: sendNotification
      summary: Send notification
      description: Send an apple notification to authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: Notification sent successfully

  /notification/device/token:
    post:
      tags:
        - notifications
      operationId: storeDeviceToken
      summary: Store device token
      description: Store a device token for push notifications.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceToken'
      responses:
        '200':
          description: Token stored successfully

    delete:
      tags:
        - notifications
      operationId: deleteDeviceTokens
      summary: Delete device tokens
      description: Delete all device tokens for the authenticated user
      responses:
        '204':
          description: Tokens deleted successfully

  /health-check:
    get:
      tags:
        - misc
      operationId: healthCheck
      summary: Health check
      description: System health check endpoint
      security: []
      responses:
        '200':
          description: System is healthy

  /report/reasons:
    get:
      tags:
        - misc
      operationId: getReportReasons
      summary: Get report reasons
      description: Get all available report reasons for content reporting
      responses:
        '200':
          description: List of report reasons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportReason'

  /waitlist/email:
    post:
      tags:
        - misc
      operationId: updateWaitlistEmail
      summary: Update waitlist email
      description: Update email address of user on waitlist by user ID
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitlistEmail'
      responses:
        '200':
          description: Email updated successfully

  /waitlist/access-code:
    post:
      tags:
        - misc
      operationId: storeWaitlistAccessCode
      summary: Store waitlist access code
      description: Allows a user to input an access code to skip the waitlist queue
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitlistAccessCode'
      responses:
        '200':
          description: Access code stored successfully

  /moments/{moment-uuid}/signing-key:
    parameters:
      - name: moment-uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - moments
      operationId: getMomentSigningKey
      summary: Get Mux signing key
      description: Returns a signing key to access a video's playback. Must be called whilst initiating a video from Mux.
      responses:
        '200':
          description: Signing key retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  signing_key:
                    type: string

  /users/me/moments/image:
    post:
      tags:
        - moments
      operationId: createImageMoment
      summary: Create image moment
      description: Creates an image moment for the authenticated user. All moments created start in the pending state until an actual media item is uploaded and associated to it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - timestamp
                - local_id
              properties:
                type:
                  type: string
                  enum: [image]
                timestamp:
                  type: string
                  format: date-time
                  description: The timestamp from when the image/moment was actually taken
                caption:
                  type: string
                  description: Optional caption for the moment
                local_id:
                  type: string
                  format: uuid
                  description: Local system id for the asset
      responses:
        '201':
          description: Image moment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Moment'

  /users/me/moments/video:
    post:
      tags:
        - moments
      operationId: createVideoMoment
      summary: Create video moment
      description: |
        Creates a video moment for the authenticated user. All moments created start in the pending state until an actual media item is uploaded and associated to it.
        This endpoint returns a mux uploadable endpoint to send the video to.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - timestamp
                - local_id
              properties:
                type:
                  type: string
                  enum: [video]
                timestamp:
                  type: string
                  format: date-time
                  description: The timestamp from when the video/moment was actually taken
                caption:
                  type: string
                  description: Optional caption for the moment
                local_id:
                  type: string
                  format: uuid
                  description: Local system id for the asset
      responses:
        '201':
          description: Video moment created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Moment'
                  - type: object
                    properties:
                      mux_upload_url:
                        type: string
                        description: URL for uploading video to Mux

  /users/me/moments:
    post:
      tags:
        - moments
      operationId: createMoment
      summary: Create moment
      description: Creates a moment for the authenticated user. Supports both image and video types.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - type
                - timestamp
                - local_id
                - file
              properties:
                type:
                  type: string
                  enum: [image]
                timestamp:
                  type: string
                  format: date-time
                  description: The timestamp from when the moment was taken
                caption:
                  type: string
                  description: Optional caption for the moment
                local_id:
                  type: string
                  format: uuid
                  description: Local system id for the asset
                metadata:
                  type: object
                  description: Additional metadata for the moment
                file:
                  type: string
                  format: binary
                  description: Primary file for the moment
                secondary_local_id:
                  type: string
                  format: uuid
                  description: Optional local id for secondary file
                secondary_file:
                  type: string
                  format: binary
                  description: Optional secondary file for the moment
      responses:
        '201':
          description: Moment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Moment'

  /users/me/contacts/invite/{invite-id}:
    parameters:
      - name: invite-id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    put:
      tags:
        - user
      operationId: updateInviteStatus
      summary: Update invite status
      description: |
        Updates an invite request status. Takes the invite id created when using the create invite method and updates its status.
        Available statuses:
        - not_sent: the invite has been created internally but not sent to the end user
        - pending: The invite has been sent to the end user
        - lapsed: The invite link has timed out
        - cancelled: The invite link has been cancelled
        - active: The invite link has been used and the user is now active in PackChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [not_sent, pending, lapsed, cancelled, active]
                  description: New status for the invite
      responses:
        '200':
          description: Invite status updated successfully

    delete:
      tags:
        - user
      operationId: cancelInvite
      summary: Cancel invite
      description: Cancels an invite as long as the invite status hasn't already been set to active.
      responses:
        '204':
          description: Invite cancelled successfully
